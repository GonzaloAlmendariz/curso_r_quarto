[
  {
    "objectID": "index.html",
    "href": "index.html",
    "title": "Curso R",
    "section": "",
    "text": "This is a Quarto website.\nTo learn more about Quarto websites visit https://quarto.org/docs/websites.\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "ca_s3.html",
    "href": "ca_s3.html",
    "title": "ca_s3",
    "section": "",
    "text": "library(ggplot2)\nlibrary(WDI)\nlibrary(dplyr)\n\n\nAttaching package: 'dplyr'\n\n\nThe following objects are masked from 'package:stats':\n\n    filter, lag\n\n\nThe following objects are masked from 'package:base':\n\n    intersect, setdiff, setequal, union\ndf = WDI(\n  country = \"all\",\n  indicator = c(\n    pib_capita = \"NY.GDP.PCAP.CD\",\n    esp_vida = \"SP.DYN.LE00.IN\",\n    poblacion = \"SP.POP.TOTL\"\n  ),\n  start = 2014,\n  end = 2024,\n  extra = T\n)\ndf_22 = df %&gt;% \n  filter(region != \"Aggregates\", year == 2022) %&gt;% \n  select(-year)\ndf_22 %&gt;% \n  head()\n\n         country iso2c iso3c status lastupdated pib_capita esp_vida poblacion\n1    Afghanistan    AF   AFG         2025-07-01   357.2612   65.617  40578842\n2        Albania    AL   ALB         2025-07-01  6846.4267   78.769   2777689\n3        Algeria    DZ   DZA         2025-07-01  4961.5526   76.129  45477389\n4 American Samoa    AS   ASM         2025-07-01 18017.4589   72.752     48342\n5        Andorra    AD   AND         2025-07-01 42414.0590   84.016     79705\n6         Angola    AO   AGO         2025-07-01  2929.6945   64.246  35635029\n                      region          capital longitude latitude\n1                 South Asia            Kabul   69.1761  34.5228\n2      Europe & Central Asia           Tirane   19.8172  41.3317\n3 Middle East & North Africa          Algiers   3.05097  36.7397\n4        East Asia & Pacific        Pago Pago  -170.691 -14.2846\n5      Europe & Central Asia Andorra la Vella    1.5218  42.5075\n6         Sub-Saharan Africa           Luanda    13.242 -8.81155\n               income        lending\n1          Low income            IDA\n2 Upper middle income           IBRD\n3 Upper middle income           IBRD\n4         High income Not classified\n5         High income Not classified\n6 Lower middle income           IBRD\nggplot(df_22)\nggplot(df_22, aes(x = pib_capita, y = esp_vida))\nggplot(df_22, aes(x = pib_capita, y = esp_vida)) +\n  geom_point()\n\nWarning: Removed 8 rows containing missing values or values outside the scale range\n(`geom_point()`).\nggplot(df_22, aes(x = pib_capita, y = esp_vida)) +\n  geom_point() +\n  scale_x_log10()\n\nWarning: Removed 8 rows containing missing values or values outside the scale range\n(`geom_point()`).\nggplot(df_22, aes(x = pib_capita, y = esp_vida)) +\n  geom_point(color = \"#32CD32\", size =  1.5, alpha = 0.9) +\n  scale_x_log10()\n\nWarning: Removed 8 rows containing missing values or values outside the scale range\n(`geom_point()`).\nggplot(df_22, aes(x = pib_capita, y = esp_vida, color = region)) +\n  geom_point(size =  1.5, alpha = 0.9) +\n  scale_x_log10()\n\nWarning: Removed 8 rows containing missing values or values outside the scale range\n(`geom_point()`).\nggplot(df_22, aes(x = pib_capita, y = esp_vida, color = region)) +\n  geom_point(size =  1.5, alpha = 0.9) +\n  scale_x_log10() +\n  labs(\n    title = \"Relación entre  PBI y la esperanza de vida\",\n    x = \"PBI per cápita (log10)\",\n    y = \"Esperanza de vida\",\n    color = \"Región\"\n  )\n\nWarning: Removed 8 rows containing missing values or values outside the scale range\n(`geom_point()`).\nggplot(df_22, aes(x = pib_capita, y = esp_vida, color = region)) +\n  geom_point(size =  1.5, alpha = 0.9) +\n  scale_x_log10() +\n  labs(\n    title = \"Relación entre  PBI y la esperanza de vida\",\n    x = \"PBI per cápita (log10)\",\n    y = \"Esperanza de vida\",\n    color = \"Región\"\n  ) +\n  facet_wrap(~region) +\n  theme(legend.position = \"none\")\n\nWarning: Removed 8 rows containing missing values or values outside the scale range\n(`geom_point()`).\ngrafico = ggplot(df_22, aes(x = pib_capita, y = esp_vida, color = region)) +\n  geom_point(size =  1.5, alpha = 0.9) +\n  scale_x_log10() +\n  labs(\n    title = \"Relación entre  PBI y la esperanza de vida\",\n    x = \"PBI per cápita\",\n    y = \"Esperanza de vida\",\n    color = \"Región\"\n  )\ngrafico\n\nWarning: Removed 8 rows containing missing values or values outside the scale range\n(`geom_point()`).\ngrafico +\n  theme_minimal()\n\nWarning: Removed 8 rows containing missing values or values outside the scale range\n(`geom_point()`).\ngrafico +\n  theme_bw()\n\nWarning: Removed 8 rows containing missing values or values outside the scale range\n(`geom_point()`).\nlibrary(ggthemes)\ngrafico +\n  theme_economist()\n\nWarning: Removed 8 rows containing missing values or values outside the scale range\n(`geom_point()`)."
  },
  {
    "objectID": "ca_s3.html#graficos-bivarios",
    "href": "ca_s3.html#graficos-bivarios",
    "title": "ca_s3",
    "section": "Graficos bivarios",
    "text": "Graficos bivarios\n\ndf_22 %&gt;%\nggplot(aes(x = income, y = esp_vida, fill = income)) +\ngeom_boxplot() +\nlabs(title = \"Distribución de la esperanza de vida por tipo de ingreso\",\nx = \"Tipo de ingreso\",\ny = \"Esperanza de vida\") +\ntheme_minimal() +\ntheme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\ndf_22 %&gt;%\nggplot(aes(x = income, y = esp_vida, fill = income)) +\ngeom_violin(trim = FALSE, alpha = 0.9) +\nlabs(title = \"Distribución de la esperanza de vida por tipo de ingreso\",\nx = \"Tipo de ingreso\",\ny = \"Esperanza de vida\") +\ntheme_minimal() +\ntheme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nggplot(df_22, aes(x = pib_capita, y = esp_vida)) +\ngeom_point(alpha = 0.6) +\nscale_x_log10() +\nlabs(x = \"PIB per cápita (log10)\", y = \"Esperanza de vida\") +\ntheme_minimal()\n\nWarning: Removed 7 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\nggplot(df_22, aes(x = pib_capita, y = esp_vida)) +\ngeom_point(alpha = 0.6) +\nscale_x_log10() +\ngeom_smooth(method = \"lm\", se = FALSE, color = \"red\") +\nlabs(x = \"PIB per cápita (log10)\", y = \"Esperanza de vida\") +\ntheme_minimal()\n\n`geom_smooth()` using formula = 'y ~ x'\n\n\nWarning: Removed 7 rows containing non-finite outside the scale range\n(`stat_smooth()`).\n\n\nWarning: Removed 7 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\nggplot(df_22, aes(x = income, fill = region)) +\ngeom_bar(position = \"fill\") +\nlabs(x = \"Nivel de ingreso\", y = \"Proporción\", fill = \"Región\") +\ntheme_minimal()\n\n\n\n\n\n\n\n\n\nlibrary(ggsci)\n\n\nggplot(df_22, aes(x = region, y = esp_vida, fill = region)) +\ngeom_boxplot() +\nscale_fill_nejm() +\ntheme_minimal() +\nlabs(title = \"Boxplot por región con paleta NEJM\") +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nggplot(df_22, aes(x = region, y = esp_vida, fill = region)) +\ngeom_boxplot() +\nscale_fill_lancet() +\ntheme_minimal() +\nlabs(title = \"Boxplot por región con paleta Lacet\") +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nggplot(df_22, aes(x = region, y = esp_vida, fill = region)) +\ngeom_boxplot() +\nscale_fill_jama() +\ntheme_minimal() +\nlabs(title = \"Boxplot por región con paleta Jama\") +\n  theme(legend.position = \"none\")\n\n\n\n\n\n\n\n\n\nggplot(df_22, aes(x = esp_vida, fill = region)) +\ngeom_histogram(binwidth = 3, color = \"black\") +\nscale_fill_viridis_d(option = \"C\") +\nfacet_wrap(~ region) +\ntheme_minimal() +\nlabs(title = \"Histograma por región con viridis\",\nx = ''\n, y = '') +\ntheme(legend.position = 'none')\n\n\n\n\n\n\n\n\n\nlibrary(patchwork)\n\n\np1 = ggplot(df_22, aes(x = esp_vida)) +\ngeom_density(fill = \"darkgreen\", alpha = 0.7) +\nlabs(title = \"Distribución de la esperanza de vida\") +\ntheme_minimal()\n\n\np2 = ggplot(df_22, aes(x = region, y = esp_vida)) +\ngeom_boxplot(fill = \"darkgreen\", alpha = 0.7) +\nlabs(title = \"Esperanza de vida por región\", x = \"Región\", y = \"Esperanza de vida\") +\ntheme_minimal()\n\n\np3 = df_22 %&gt;%\nfilter(income != \"Not classified\") %&gt;%\nggplot(aes(x = income, y = esp_vida)) +\ngeom_violin(fill = \"darkgreen\", alpha = 0.7) +\nlabs(title = \"Esperanza de vida por nivel de ingreso\", x = \"Nivel de ingrsos\") +\ntheme_minimal()\n\n\n(p1 | p2) / p3\n\n\n\n\n\n\n\n\n\nlibrary(ggthemes)\n\n\nggplot(df_22, aes(x = region, y = esp_vida, fill = region)) +\ngeom_boxplot() +\ntheme_economist() +\nscale_fill_economist() +\nlabs(title = \"Estilo The Economist\")\n\n\n\n\n\n\n\n\n\nggplot(df_22, aes(x = region, y = esp_vida, fill = region)) +\ngeom_boxplot() +\ntheme_economist() +\nscale_fill_wsj() +\nlabs(title = \"Estilo WSJ\")\n\nWarning: This manual palette can handle a maximum of 6 values. You have\nsupplied 7\n\n\n\n\n\n\n\n\n\n\nggplot(df_22, aes(x = region, y = esp_vida, fill = region)) +\ngeom_boxplot() +\ntheme_economist() +\nscale_fill_canva() +\nlabs(title = \"Estilo Canva\")\n\nWarning: This manual palette can handle a maximum of 4 values. You have\nsupplied 7\n\n\n\n\n\n\n\n\n\n\nlibrary(ggtext)\nlibrary(glue)\n\n\ncolores = c(\n  \"Sub-Saharan Africa\" = \"#E63946\",\n  \"Middle East & North Africa\" = \"#F28482\",\n  \"South Asia\" = \"#2A9D8F\",\n  \"East Asia & Pacific\" = \"#8AC926\",\n  \"Europe & Central Asia\" = \"#F4A261\",\n  \"Latin America & Caribbean\" = \"#457B9D\",\n  \"North America\" = \"#A17DB2\"\n)\n\n\ntitulo = glue(\n  \"Esperanza de vida por región:&lt;br&gt;\",\n  \"&lt;span style='color:{colores['Sub-Saharan Africa']}'&gt;África Subsahariana&lt;/span&gt;, \",\n  \"&lt;span style='color:{colores['Middle East & North Africa']}'&gt;MENA&lt;/span&gt;, \",\n  \"&lt;span style='color:{colores['South Asia']}'&gt;Asia del Sur&lt;/span&gt;, \",\n  \"&lt;span style='color:{colores['East Asia & Pacific']}'&gt;Asia Oriental y Pacífico&lt;/span&gt;, \",\n  \"&lt;span style='color:{colores['Europe & Central Asia']}'&gt;Europa y Asia Central&lt;/span&gt;, \",\n  \"&lt;span style='color:{colores['Latin America & Caribbean']}'&gt;América Latina&lt;/span&gt;, \",\n  \"&lt;span style='color:{colores['North America']}'&gt;Norteamérica&lt;/span&gt;\"\n)\n\n\ndf_22 = df_22 %&gt;%\n  mutate(region = factor(region, levels = names(colores)))\n\n# Luego graficamos\nggplot(df_22, aes(x = region, y = esp_vida, fill = region)) +\n  geom_boxplot() +\n  scale_fill_manual(values = colores) +\n  theme_minimal() +\n  theme(\n    plot.title = element_markdown(),\n    legend.position = \"none\"\n  ) +\n  ggtitle(titulo)\n\n\n\n\n\n\n\n\n\nlibrary(scales)\n\n\nggplot(df_22, aes(x = pib_capita, y = esp_vida)) +\ngeom_point(color = \"steelblue\") +\nscale_x_continuous(labels = dollar_format(prefix = \"US$\")) +\ntheme_minimal() +\nlabs(title = \"Relación entre PIB per cápita y esperanza de vida\",\nx = \"\"\n, y = \"Esperanza de vida\")\n\nWarning: Removed 7 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\nlibrary(gghighlight)\n\n\npaises_vecinos = c(\"Peru\", \"Brasil\", \"Colombia\",\n\"Ecuador\", \"Chile\", \"Argentina\")\n\n\ndf_22 %&gt;%\nggplot(aes(x = log(pib_capita), y = esp_vida, label = country)) +\ngeom_point(color = \"gray30\", size = 2) +\ngghighlight(country %in% paises_vecinos,\nlabel_key = country,\nunhighlighted_params = list(alpha = 0.4)) +\ntheme_minimal() +\nlabs(\ntitle = \"Países sudamericanos seleccionados resaltados\",\nsubtitle = \"Relación entre PBI per cápita (log) y esperanza de vida\",\nx = \"PBI per cápita (log10)\",\ny = \"Esperanza de vida\"\n)\n\nWarning: Removed 7 rows containing missing values or values outside the scale range\n(`geom_point()`).\n\n\n\n\n\n\n\n\n\n\nggsave(\"grafico.png\", plot = p1,\nwidth = 8, height = 6, dpi = 300)"
  },
  {
    "objectID": "about.html",
    "href": "about.html",
    "title": "About",
    "section": "",
    "text": "About this site\n\n1 + 1\n\n[1] 2"
  },
  {
    "objectID": "sesion1.html#objetivos-de-la-sesión-de-hoy",
    "href": "sesion1.html#objetivos-de-la-sesión-de-hoy",
    "title": "Sesión 1: Introducción",
    "section": "Objetivos de la sesión de hoy",
    "text": "Objetivos de la sesión de hoy\nFamiliarizarse con el entorno R y RStudio, comprender la estructura básica del lenguaje, instalar y cargar paquetes, e importar bases de datos en diversos formatos. Primer contacto con la exploración estructural de datos."
  },
  {
    "objectID": "sesion1.html#crear-un-archivo-de-script",
    "href": "sesion1.html#crear-un-archivo-de-script",
    "title": "Sesión 1: Introducción",
    "section": "Crear un archivo de script",
    "text": "Crear un archivo de script\nCuando trabajamos en R, utilizamos diferentes tipos de archivos para organizar y guardar nuestro trabajo. Dos formatos comunes son el archivo R Script y el documento Quarto. Ambos se utilizan para escribir código, pero cumplen propósitos diferentes que es importante entender.\nUn archivo R Script es un archivo simple donde escribimos y guardamos nuestras instrucciones de código. Sirve como un registro de los comandos que ejecutamos, permitiendo reutilizarlos o ajustarlos más adelante. Sin embargo, este tipo de archivo no incluye espacio para explicaciones extensas ni muestra los resultados directamente junto al código.\nEn cambio, un documento Quarto va más allá al permitir combinar texto explicativo, bloques de código y los resultados generados (como tablas y gráficos) en un solo archivo. Además, es posible exportar el archivo final en formatos como HTML, PDF o Word, haciéndolo ideal para documentar y compartir análisis de manera profesional (de hecho, este libro esta hecho en Quarto). Esta capacidad de integrar explicación, análisis y presentación en un mismo lugar hace que Quarto sea particularmente útil para aprender y comunicar análisis de datos. En nuestras clases, vamos a utilizar documentos Quarto.\n\nAccede a la ventana Files:\n\nEn RStudio, localiza el panel Files. Este panel muestra el contenido de la carpeta de trabajo que configuraste previamente.\n\nCrea un nuevo documento Quarto:\n\nEn el panel Files, haz clic en el botón New File y selecciona Quarto Document.\n\n\n\nAparecerá un cuadro de diálogo donde puedes configurar el título del documento, tu nombre y el formato de salida inicial (HTML es una buena opción para empezar). Haz clic en Create.\n\nGuarda automáticamente en la carpeta de trabajo:\n\nCuando crees el documento desde la ventana Files, este se guardará automáticamente en tu carpeta de trabajo configurada. No necesitas realizar pasos adicionales para seleccionar la ubicación.\n\n\nEn un archivo Quarto puedes combinar texto explicativo (en formato Markdown) con bloques (chunks) de código en R. Los bloques de código son las secciones donde escribirás las instrucciones que deseas ejecutar, y están delimitados por tres backticks (```) seguidos del lenguaje que estás utilizando (en este caso, r). Para agregar un bloque de código de manera rápida, puedes utilizar el atajo de teclado:\n\nCtrl + Alt + I en Windows y Linux.\nCmd + Option + I en Mac.\n\nEste atajo insertará automáticamente un nuevo chunk en tu documento, con la estructura básica para que puedas empezar a escribir tu código. Un chunk de código tiene este formato:\n\n# Aquí escribes tu código en R\n\nDentro del chunk, puedes incluir cualquier instrucción que se ejecutará cuando proceses el documento. Esto permite mantener el texto explicativo y el código separados pero integrados en el mismo archivo.\n\n\n\n\n\n\nImportante\n\n\n\nEs primordial que trabajes directamente desde tu carpeta de trabajo, asegurando que todos los archivos relacionados con el proyecto estén organizados en una carpeta."
  },
  {
    "objectID": "sesion1.html#operaciones-básicas-con-elementos",
    "href": "sesion1.html#operaciones-básicas-con-elementos",
    "title": "Sesión 1: Introducción",
    "section": "Operaciones básicas con elementos",
    "text": "Operaciones básicas con elementos\nEn R, al igual que en otros lenguajes de programación, es fundamental comprender cómo manipular distintos tipos de datos mediante operaciones básicas.\n\nOperadores matemáticos:\nPermiten realizar cálculos aritméticos entre valores.\n\n\\(a + b\\) → a + b\n\n\\(a - b\\) → a - b\n\n\\(a \\times b\\) → a * b\n\n\\(\\frac{a}{b}\\) → a / b\n\n\\(a^b\\) → a ^ b\n\n\\(\\sqrt{a}\\) → sqrt(a)\n\nSuma\n\n5 + 3\n\n[1] 8\n\n\nResta\n\n10 - 4\n\n[1] 6\n\n\nMultiplicación\n\n5*6\n\n[1] 30\n\n\nDivisión\n\n30/5\n\n[1] 6\n\n\nPotencia:\n\n5^2\n\n[1] 25\n\n\nOperaciones en paréntesis\n\n(2 + 3) * 10 \n\n[1] 50\n\n\nLos elementos lógicos son tratados como 0 y 1\n\nFALSE + FALSE\n\n[1] 0\n\n\n\nTRUE + TRUE\n\n[1] 2\n\n\n\nTRUE + FALSE\n\n[1] 1\n\n\n\n\n\n\n\n\nCuidado\n\n\n\nLos elementos de texto no están diseñados para realizar operaciones aritméticas como suma o multiplicación. Si intentas hacerlo, obtendrás un error. Esto se debe a que, a diferencia de los números, el texto no representa cantidades numéricas sobre las que se pueda operar.\n\n\nError:\n\"Hola\" + \"Que tal\"\nError in “Hola” + “Que tal” : non-numeric argument to binary operator\n\n\nOperadores de comparación\nPermiten evaluar relaciones entre valores. Devuelven siempre un valor lógico: TRUE o FALSE.\n\n\\(x = y\\) → x == y: Igualdad\n\\(x \\neq y\\) → x != y: Desigualdad\n\\(x &lt; y\\): Menor que\n\\(x \\leq y\\) → x &lt;= y: Menor o igual que\n\\(x &gt; y\\): Mayor que\n\\(x \\geq y\\) → x &gt;= y: Mayor o igual que\n\n\n5 == 5   \n\n[1] TRUE\n\n\n\n3 != 2    \n\n[1] TRUE\n\n\n\n10 &lt; 8    \n\n[1] FALSE\n\n\n\n4 &gt;= 4     \n\n[1] TRUE\n\n\n\n\nOperadores lógicos\nPermiten combinar condiciones. Estas expresiones también devuelven TRUE o FALSE.\n\nNegación lógica: \\(\\lnot x\\) → !x Invierte el valor lógico de x.\nConjunción lógica (Y): \\(x \\land y\\) → x & y Devuelve TRUE solo si ambas condiciones son verdaderas.\nDisyunción lógica (O): \\(x \\lor y\\) → x | y Devuelve TRUE si al menos una condición es verdadera.\n\nNegación lógica\n\n!TRUE    \n\n[1] FALSE\n\n!FALSE    \n\n[1] TRUE\n\n\nConjunción lógica (Y)\n\n  (5 &gt; 3) & (2 &lt; 4)   \n\n[1] TRUE\n\n  (10 &gt; 3) & (1 &gt; 5)  \n\n[1] FALSE\n\n\nDisyunción lógica (O):\n\n  (4 &lt; 2) | (7 &gt; 1)   \n\n[1] TRUE\n\n  (3 == 5) | (2 &gt; 10) \n\n[1] FALSE"
  },
  {
    "objectID": "sesion1.html#tipos-de-objetos-en-r",
    "href": "sesion1.html#tipos-de-objetos-en-r",
    "title": "Sesión 1: Introducción",
    "section": "Tipos de objetos en R",
    "text": "Tipos de objetos en R\nEn R, no todo es solo un número o una palabra. Muchas veces necesitamos guardar varios elementos juntos, y para eso usamos diferentes tipos de objetos. Cada uno tiene su propia estructura y sirve para distintos propósitos.\n\nLos principales tipos de objetos son:\nVectores\nConjunto de elementos del mismo tipo (todos números, o todos textos, o todos lógicos).\n\nedades = c(18, 21, 25)\nnombres = c(\"Ana\", \"Luis\", \"María\")\n\n\nedades\n\n[1] 18 21 25\n\nnombres\n\n[1] \"Ana\"   \"Luis\"  \"María\"\n\n\nMatrices\nComo una tabla, pero con solo un tipo de dato (por ejemplo, solo números).\n\nmatriz = matrix(1:6, nrow = 2)\n\n\nmatriz\n\n     [,1] [,2] [,3]\n[1,]    1    3    5\n[2,]    2    4    6\n\n\nListas\nConjunto de elementos que pueden ser de distintos tipos y formas.\n\nmi_lista = list(nombre = \"Andrés\", edades, aprobado = TRUE)\n\n\nmi_lista\n\n$nombre\n[1] \"Andrés\"\n\n[[2]]\n[1] 18 21 25\n\n$aprobado\n[1] TRUE\n\n\nData frames\nLa estructura más usada para bases de datos. Cada columna es un vector y puede tener un tipo diferente (números, textos, etc.).\n\ndatos = data.frame(nombre = c(\"Ana\", \"Luis\"), edad = c(18, 21),\n                   aprobado = c(T, F), horas_estudio = c(15, 9))\n\n\ndatos\n\n  nombre edad aprobado horas_estudio\n1    Ana   18     TRUE            15\n2   Luis   21    FALSE             9\n\n\nAl trabajar con datos en R, no solo importa tener la información: también importa cómo está organizada. Los objetos nos permiten guardar, transformar y analizar datos de formas muy distintas. Por eso, conocer sus tipos es esencial.\n\n\n\n\n\n\nDato\n\n\n\nCada tipo de objeto cumple un rol distinto:\n\nUn vector te permite guardar variables como edad, ingresos o respuestas a una encuesta.\nUn data frame organiza esas variables como columnas, ideal para trabajar con bases de datos reales.\nUna lista puede guardar resultados de modelos, gráficos o varios tipos de objetos juntos."
  },
  {
    "objectID": "sesion1.html#funciones-estructurales",
    "href": "sesion1.html#funciones-estructurales",
    "title": "Sesión 1: Introducción",
    "section": "Funciones estructurales",
    "text": "Funciones estructurales\nLas funciones estructurales te dicen cómo está armado un objeto. No transforman los datos, sino que te dan información sobre su forma interna.\nstr(): estructura interna\n\nstr(iris) \n\n'data.frame':   150 obs. of  5 variables:\n $ Sepal.Length: num  5.1 4.9 4.7 4.6 5 5.4 4.6 5 4.4 4.9 ...\n $ Sepal.Width : num  3.5 3 3.2 3.1 3.6 3.9 3.4 3.4 2.9 3.1 ...\n $ Petal.Length: num  1.4 1.4 1.3 1.5 1.4 1.7 1.4 1.5 1.4 1.5 ...\n $ Petal.Width : num  0.2 0.2 0.2 0.2 0.2 0.4 0.3 0.2 0.2 0.1 ...\n $ Species     : Factor w/ 3 levels \"setosa\",\"versicolor\",..: 1 1 1 1 1 1 1 1 1 1 ...\n\n\nMuestra la estructura del objeto: cuántas filas tiene, qué variables contiene, qué tipo de datos hay en cada columna, y un vistazo a los primeros valores.\nhead() y tail(): primeras o últimas filas\n\nhead(iris)   # Muestra las primeras 6 filas\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n4          4.6         3.1          1.5         0.2  setosa\n5          5.0         3.6          1.4         0.2  setosa\n6          5.4         3.9          1.7         0.4  setosa\n\n\nTambién puedes pedir un número específico:\n\nhead(iris, 3)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n\n\n\ntail(iris)   # Muestra las últimas 6 filas\n\n    Sepal.Length Sepal.Width Petal.Length Petal.Width   Species\n145          6.7         3.3          5.7         2.5 virginica\n146          6.7         3.0          5.2         2.3 virginica\n147          6.3         2.5          5.0         1.9 virginica\n148          6.5         3.0          5.2         2.0 virginica\n149          6.2         3.4          5.4         2.3 virginica\n150          5.9         3.0          5.1         1.8 virginica\n\n\nDe la misma forma con tail():\n\nhead(iris, 3)\n\n  Sepal.Length Sepal.Width Petal.Length Petal.Width Species\n1          5.1         3.5          1.4         0.2  setosa\n2          4.9         3.0          1.4         0.2  setosa\n3          4.7         3.2          1.3         0.2  setosa\n\n\nnrow() y ncol(): número de filas y columnas\n\nnrow(iris)   # Cuántas filas hay (observaciones)\n\n[1] 150\n\nncol(iris)   # Cuántas columnas tiene (variables)\n\n[1] 5\n\n\ncolnames(): nombres de columnas\n\ncolnames(iris)\n\n[1] \"Sepal.Length\" \"Sepal.Width\"  \"Petal.Length\" \"Petal.Width\"  \"Species\"     \n\n\nDevuelve un vector con los nombres de todas las columnas.\n\n\n\n\n\n\nImportante\n\n\n\nEstas funciones te permiten entender rápidamente con qué tipo de objeto estás trabajando, qué tiene dentro y cómo interactuar con él. Son como las funciones de “reconocimiento” antes de empezar a transformar o analizar."
  },
  {
    "objectID": "sesion1.html#funciones-analíticas",
    "href": "sesion1.html#funciones-analíticas",
    "title": "Sesión 1: Introducción",
    "section": "Funciones analíticas",
    "text": "Funciones analíticas\nLa funciones analíticas procesan los datos y te dan un resultado: una media, una tabla, un resumen, una visualización, etc.\nmean(): calcular el promedio\n\nmean(iris$Petal.Length)\n\n[1] 3.758\n\n\nNos da el promedio de la longitud de los pétalos. Como mean() espera un vector numérico, le pasamos solo una columna del data.frame: iris$Petal.Length.\nsummary(): resumen numérico del data.frame\n\nsummary(iris)\n\n  Sepal.Length   Sepal.Width    Petal.Length   Petal.Width        Species  \n Min.   :4.30   Min.   :2.00   Min.   :1.00   Min.   :0.1   setosa    :50  \n 1st Qu.:5.10   1st Qu.:2.80   1st Qu.:1.60   1st Qu.:0.3   versicolor:50  \n Median :5.80   Median :3.00   Median :4.35   Median :1.3   virginica :50  \n Mean   :5.84   Mean   :3.06   Mean   :3.76   Mean   :1.2                  \n 3rd Qu.:6.40   3rd Qu.:3.30   3rd Qu.:5.10   3rd Qu.:1.8                  \n Max.   :7.90   Max.   :4.40   Max.   :6.90   Max.   :2.5                  \n\n\nAplica una función a todas las columnas del data.frame. Muestra medias, medianas y rangos para columnas numéricas, y conteos para las categóricas.\ntable(): resumen de frecuencias\n\ntable(iris$Species)\n\n\n    setosa versicolor  virginica \n        50         50         50 \n\n\nplot nos permite crear una visualización de forma sencilla\n\nplot(iris$Petal.Length, iris$Petal.Width,\n     col = iris$Species,\n     pch = 19,\n     xlab = \"Largo del pétalo\",\n     ylab = \"Ancho del pétalo\",\n     main = \"Pétalo: largo vs ancho por especie\")"
  },
  {
    "objectID": "sesion1.html#instalar-un-paquete",
    "href": "sesion1.html#instalar-un-paquete",
    "title": "Sesión 1: Introducción",
    "section": "Instalar un paquete",
    "text": "Instalar un paquete\nMe gusta pensar que instalar un paquete en R es similar a ir a la tienda y comprar una caja de herramientas. Después de comprarla, la mueves a tu propio almacén para asegurarte de que la tendrás cuando la necesites. Esto solo necesita hacerse una vez por paquete, a menos que quieras actualizarlo (tener la última versión).\nCon R, instalamos un paquete con una función llamada install.packages() seguida del nombre del paquete entre comillas.\n\ninstall.packages('dplyr')"
  },
  {
    "objectID": "sesion1.html#cargar-un-paquete",
    "href": "sesion1.html#cargar-un-paquete",
    "title": "Sesión 1: Introducción",
    "section": "Cargar un paquete",
    "text": "Cargar un paquete\nCuando cargas un paquete en R, es como si sacaras la caja de herramientas del almacén y la pusieras en tu mesa de trabajo. Solo entonces las herramientas dentro de la caja te son accesibles para tus proyectos. Haces esto cada vez que comienzas un nuevo documento o una sesión de R.\nPara hacerlo, usamos la función library().\n\nlibrary(dplyr)\n\nTambién puedes lograr esto con :: si quieres usar una función completa de otro paquete, pero no quieres cargar el paquete completo. Esto es como sacar una herramienta específica de la caja, pero no poner toda la caja en tu mesa de trabajo.\nPor ejemplo, el paquete psych tiene una función describe que produce un resumen estadístico detallado de un conjunto de datos dado. Si queremos aplicarlo en un conjunto de datos predeterminado en R como iris, podemos hacerlo sin cargar todo psych:\n\npsych::describe(iris)\n\nProporciona un resumen estadístico de los datos: media, desviación estándar, mínimo, máximo, etc., todo sin tener que cargar todo el paquete psych.\n\n\n               n mean   sd median min max   se\nSepal.Length 150 5.84 0.83   5.80 4.3 7.9 0.07\nSepal.Width  150 3.06 0.44   3.00 2.0 4.4 0.04\nPetal.Length 150 3.76 1.77   4.35 1.0 6.9 0.14\nPetal.Width  150 1.20 0.76   1.30 0.1 2.5 0.06\nSpecies*     150 2.00 0.82   2.00 1.0 3.0 0.07\n\n\nglimpse() es una función de dplyr que proporciona una vista compacta del dataframe, mostrando los nombres de las variables, sus tipos de datos y una muestra de valores.\n\nglimpse(iris)\n\nRows: 150\nColumns: 5\n$ Sepal.Length &lt;dbl&gt; 5.1, 4.9, 4.7, 4.6, 5.0, 5.4, 4.6, 5.0, 4.4, 4.9, 5.4, 4.…\n$ Sepal.Width  &lt;dbl&gt; 3.5, 3.0, 3.2, 3.1, 3.6, 3.9, 3.4, 3.4, 2.9, 3.1, 3.7, 3.…\n$ Petal.Length &lt;dbl&gt; 1.4, 1.4, 1.3, 1.5, 1.4, 1.7, 1.4, 1.5, 1.4, 1.5, 1.5, 1.…\n$ Petal.Width  &lt;dbl&gt; 0.2, 0.2, 0.2, 0.2, 0.2, 0.4, 0.3, 0.2, 0.2, 0.1, 0.2, 0.…\n$ Species      &lt;fct&gt; setosa, setosa, setosa, setosa, setosa, setosa, setosa, s…\n\n\nRecuerda:\n\nCuando instalas un paquete, estás tomando la caja de herramientas y asegurándola en tu propio almacén.\nCargar un paquete, entonces, es poner esa caja de herramientas en tu mesa de trabajo para que puedas usar sus herramientas.\nImportar una función del paquete es como sacar una herramienta de la caja."
  },
  {
    "objectID": "sesion1.html#manejo-de-valores-faltantes",
    "href": "sesion1.html#manejo-de-valores-faltantes",
    "title": "Sesión 1: Introducción",
    "section": "Manejo de valores faltantes",
    "text": "Manejo de valores faltantes\nEl manejo de valores faltantes es uno de los aspectos más complejos en la limpieza de datos, y un tema importante a considerar al trabajar con conjuntos de datos. Un valor perdido o NA en R no es lo mismo que un 0 o un espacio vacío. Un valor perdido (o NA, que significa “Not Available”) es una celda que no contiene información en absoluto, lo que puede ocurrir por diversas razones, como un error en la recolección de los datos, una respuesta no proporcionada en una encuesta o una omisión involuntaria al momento de ingresar los datos.\nPor ejemplo:\n\nencuesta_excel\n\n# A tibble: 10 × 3\n  genero    medio_comunicación  edad\n  &lt;chr&gt;     &lt;chr&gt;              &lt;dbl&gt;\n1 Masculino Televisión            34\n2 Femenino  Redes sociales        NA\n3 Femenino  Redes sociales        55\n4 Otro      Radio                 63\n5 Femenino  Televisión            NA\n6 Masculino Redes sociales        19\n# ℹ 4 more rows\n\n\nPuedes detectar estos valores la función como is.na(), que devuelve un valor lógico (TRUE o FALSE) indicando si un valor es NA. Seleccionamos la columna.\n\nis.na(encuesta_excel$edad)\n\n [1] FALSE  TRUE FALSE FALSE  TRUE FALSE FALSE FALSE FALSE FALSE\n\n\nRecuerda que puedes sumar un vector lógico para contar los TRUE. En este caso los valores perdidos.\n\n# Cantidad de valores perdidos \nsum(is.na(encuesta_excel$edad)) \n\n[1] 2\n\n\nUna de las formas más simples de manejar valores faltantes es eliminarlos por completo. Esto puede hacerse utilizando la función drop_na() del paquete tidyr, que elimina las filas que contienen al menos un valor NA en cualquier columna. Esta es una solución rápida, pero es importante ser cauteloso, ya que puede resultar en la pérdida de información valiosa si hay muchos datos faltantes.\n\n# Cargamos tidyr\nlibrary(tidyr)\n\n\n# Eliminamos filas con valores faltantes\ndrop_na(encuesta_excel)\n\n# A tibble: 7 × 3\n  genero    medio_comunicación  edad\n  &lt;chr&gt;     &lt;chr&gt;              &lt;dbl&gt;\n1 Masculino Televisión            34\n2 Femenino  Redes sociales        55\n3 Otro      Radio                 63\n4 Masculino Redes sociales        19\n5 Masculino Periódico             75\n6 Femenino  Redes sociales        55\n# ℹ 1 more row\n\n\nComparemos\n\n# Podemos nombrarlo\nencuesta_sin_na = drop_na(encuesta_excel)\n\nPresta atención a las dimensiones del tibble original y del tibble sin NA\n\ndim(encuesta_excel)\n\n[1] 10  3\n\ndim(encuesta_sin_na)\n\n[1] 7 3\n\n\nSi queremos ser más específicos y eliminar valores faltantes solo en una columna particular, podemos usar:\n\n# Eliminamos filas donde la columna 'edad' tiene NA\nencuesta_sin_na = drop_na(encuesta_excel, edad)\n\nencuesta_sin_na\n\n# A tibble: 8 × 3\n  genero    medio_comunicación  edad\n  &lt;chr&gt;     &lt;chr&gt;              &lt;dbl&gt;\n1 Masculino Televisión            34\n2 Femenino  Redes sociales        55\n3 Otro      Radio                 63\n4 Masculino Redes sociales        19\n5 Masculino &lt;NA&gt;                  29\n6 Masculino Periódico             75\n# ℹ 2 more rows\n\n\n\n\n\n\n\n\nCuidado\n\n\n\nAunque eliminar valores faltantes puede ser un enfoque válido en algunos casos, no siempre es ideal. Si eliminamos demasiadas filas, podemos perder una cantidad significativa de información, lo que podría alterar los resultados de nuestro análisis. Por eso, en lugar de eliminar, muchas veces es preferible imputar los valores faltantes, es decir, reemplazarlos con un valor estimado. Por ejemplo, algunas estrategias comunes para imputar valores incluyen reemplazar por el promedio en el caso de variables numéricas o reemplazar por la moda en variables categóricas donde los valores faltantes pueden ser reemplazados por el valor más frecuente (la moda).\n\n\nPara las siguentes técnicas de limpieza utilizaremos el conjunto de datos encuesta_problematica. Te animo a que puedas identificar que posible problemas tiene antes de seguir adelante.\n\ndatos_problema = read.csv('encuesta_problematica.csv')\n\ndatos_problema\n\n  ID Nombre.PARTICIPANTE EDAD..años. Ingreso.Mensual género\n1  1         Luis Bartra          23            1500      F\n2  2        Carlos Gómez          27            2000      M\n3  2        Carlos Gómez          27            2000      M\n4  3         María López          45            2500      F\n5  4       Javier Muller          35            3800      M\n6  5          Liz García          29            1800      M"
  },
  {
    "objectID": "sesion1.html#estandarización-de-nombres-de-columnas",
    "href": "sesion1.html#estandarización-de-nombres-de-columnas",
    "title": "Sesión 1: Introducción",
    "section": "Estandarización de nombres de columnas",
    "text": "Estandarización de nombres de columnas\nLos nombres de las columnas en los conjuntos de datos pueden ser inconsistentes, incluir caracteres especiales o espacios que dificulten el manejo en R.\nPrimero, identificamos los nombres originales del conjunto de datos utilizando la función base names():\n\ncolnames(datos_problema)\n\n[1] \"ID\"                  \"Nombre.PARTICIPANTE\" \"EDAD..años.\"        \n[4] \"Ingreso.Mensual\"     \"género\"             \n\n\nPara resolver esto, utilizamos la función clean_names() del paquete janitor. Esta función transforma automáticamente los nombres de las columnas en un formato limpio y consistente:\n\n# Cargar el paquete janitor\nlibrary(janitor)\n\n# Estandarizar los nombres de las columnas\ndatos_problema = clean_names(datos_problema)\n\n\ncolnames(datos_problema)\n\n[1] \"id\"                  \"nombre_participante\" \"edad_anos\"          \n[4] \"ingreso_mensual\"     \"genero\"             \n\nhead(datos_problema, 3)\n\n  id nombre_participante edad_anos ingreso_mensual genero\n1  1         Luis Bartra        23            1500      F\n2  2        Carlos Gómez        27            2000      M\n3  2        Carlos Gómez        27            2000      M"
  },
  {
    "objectID": "sesion1.html#eliminación-de-duplicados",
    "href": "sesion1.html#eliminación-de-duplicados",
    "title": "Sesión 1: Introducción",
    "section": "Eliminación de duplicados",
    "text": "Eliminación de duplicados\nEn algunos casos, los datos pueden contener filas duplicadas que distorsionan el análisis. Podemos identificar y eliminar estas filas utilizando la función distinct() de dplyr.\n\n# Vemos el problema\ndatos_problema\n\n  id nombre_participante edad_anos ingreso_mensual genero\n1  1         Luis Bartra        23            1500      F\n2  2        Carlos Gómez        27            2000      M\n3  2        Carlos Gómez        27            2000      M\n4  3         María López        45            2500      F\n5  4       Javier Muller        35            3800      M\n6  5          Liz García        29            1800      M\n\n# Eliminamos filas duplicadas\ndatos_limpios = distinct(datos_problema)\n\n\nnrow(datos_problema)     # Antes: 7 filas\n\n[1] 6\n\nnrow(datos_limpios) \n\n[1] 5\n\n\nMostramos:\n\ndatos_limpios\n\n  id nombre_participante edad_anos ingreso_mensual genero\n1  1         Luis Bartra        23            1500      F\n2  2        Carlos Gómez        27            2000      M\n3  3         María López        45            2500      F\n4  4       Javier Muller        35            3800      M\n5  5          Liz García        29            1800      M"
  },
  {
    "objectID": "sesion1.html#guardar-como-archivo-.rds",
    "href": "sesion1.html#guardar-como-archivo-.rds",
    "title": "Sesión 1: Introducción",
    "section": "Guardar como archivo .RDS",
    "text": "Guardar como archivo .RDS\nEl formato .RDS es propio de R. Guarda un solo objeto, como un data.frame, conservando su estructura interna.\n\nsaveRDS(datos_limpios, file = \"datos_limpios.rds\")\n\nLuego, puedes volver a cargarlo con:\n\ndatos_limpios = readRDS(\"datos_limpios.rds\")\n\n\n\n\n\n\n\nDato\n\n\n\nEsto es ideal cuando trabajas con datos procesados dentro de R y quieres retomarlos luego sin tener que rehacer todo el procesamiento."
  },
  {
    "objectID": "sesion1.html#exportar-como-archivo-.csv",
    "href": "sesion1.html#exportar-como-archivo-.csv",
    "title": "Sesión 1: Introducción",
    "section": "Exportar como archivo .csv",
    "text": "Exportar como archivo .csv\nPara compartir o abrir en Excel u otros programas, lo más común es exportar a CSV.\n\nwrite.csv(datos_limpios, \n          file = \"datos_limpios.csv\", \n          row.names = FALSE)\n\n\nrow.names = FALSE evita que R agregue una columna extra con los números de fila."
  },
  {
    "objectID": "sesion1.html#guardar-todo-el-entorno-de-trabajo",
    "href": "sesion1.html#guardar-todo-el-entorno-de-trabajo",
    "title": "Sesión 1: Introducción",
    "section": "Guardar todo el entorno de trabajo",
    "text": "Guardar todo el entorno de trabajo\nSi deseas guardar todos los objetos que tienes cargados en tu sesión (variables, data frames, modelos, etc.):\n\nsave.image(file = \"mi_entorno.RData\")\n\nY para volver a cargarlo en otra sesión de R:\n\nload(\"mi_entorno.RData\")\n\n\n\n\n\n\n\nImportante\n\n\n\nEs buena práctica guardar tus objetos con nombres claros y organizarlos en carpetas por cada proyecto a realizar. Esto no solo garantiza el orden entre disntintos proyectos, sino que mejora la reproducibilidad y facilita compartir tu análisis con otras personas o retomarlo en el futuro."
  }
]